# -*- coding: utf-8 -*-
import os.path
from datetime import datetime
from utils.VKHelper import *

spartakiada_subs_path = './subscribers/spartakiada{}.txt'
users_path = './users.txt'

admin = [297002785, 275052029, 325899178, 229488682]

TIMESTAMP = 0
VK_UID = TIMESTAMP + 1
NICKNAME = VK_UID + 1
GROUP_ID = NICKNAME + 1
FIO = GROUP_ID + 1
FIRST_TIME = FIO + 1

WIN_ROUND_1 = FIRST_TIME + 1
HAS_10_BALLS = WIN_ROUND_1 + 1
RECORD_ROUND_1 = HAS_10_BALLS + 1

WIN_ROUND_2 = RECORD_ROUND_1 + 1
RECORD_ROUND_2 = WIN_ROUND_2 + 1

FINAL_PLACE = RECORD_ROUND_2 + 1
RECORD_ROUND_3 = FINAL_PLACE + 1

# UL: isu tsp uid nck grp fio fst wr1 h10 rr1 wr2 rr2 fnl rr3
# DB: tsp isu uid nck grp fio fst wr1 h10 rr1 wr2 rr2 fnl rr3

groupid = 217494619  # 230160029
joutek_ip = 'craft.joutak.ru'
joutek_link = 'https://joutak.ru'
form_link = 'https://forms.yandex.ru/u/6501f64f43f74f18a8da28de/'
telegram_link = 't.me/itmocraft'
discord_link = 'https://discord.gg/YVj5tckahA'
vk_link = 'https://vk.com/widget_community.php?act=a_subscribe_box&oid=-217494619&state=1|ITMOcraft'

# format message with countd
hi_message = \
    '–ü—Ä–∏–≤–µ—Ç! –ù–∞ –ø—Ä–æ—à–ª—ã—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ç—ã —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —Å–ø–∞—Ä—Ç–∞–∫–∏–∞–¥–µ, ' \
    '–ø—Ä–æ–≤–µ–¥—ë–Ω–Ω–æ–π –∫–ª—É–±–æ–º –ª—é–±–∏—Ç–µ–ª–µ–π –∏–≥—Ä—ã ¬´–ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç¬ª ITMOcraft. –î—É–º–∞—é, —Å–∞–º–æ–µ –≤—Ä–µ–º—è –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n\n' \
    '–ù–∞—à –∫–ª—É–± ‚Äî –∫–æ–º—å—é–Ω–∏—Ç–∏ –∏—Ç–º–æ—à–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –Ω—Ä–∞–≤–∏—Ç—Å—è –∏–≥—Ä–∞—Ç—å –≤ –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç. ' \
    '–í—ã–∂–∏–≤–∞–Ω–∏–µ, –º–æ–¥—ã, –º–∏–Ω–∏-–∏–≥—Ä—ã: –µ—Å–ª–∏ –≤–æ —á—Ç–æ-—Ç–æ –º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å, –º—ã —Å–æ–∑–¥–∞—ë–º –¥–ª—è —ç—Ç–æ–≥–æ —É—Å–ª–æ–≤–∏—è. ' \
    '–ù–∞—à–∞ –∞–ª—å–º–∞-–º–∞—Ç–µ—Ä ‚Äî SMP JouTak. ' \
    '–≠—Ç–æ —Å–µ—Ä–≤–µ—Ä —Å —à–µ—Å—Ç–∏–ª–µ—Ç–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π (–±–µ–∑ –≤–∞–π–ø–æ–≤, –±–µ–∑ –ø—Ä–∏–≤–∞—Ç–æ–≤, –±–µ–∑ —Å–ª—É—á–∞–π–Ω—ã—Ö –ª—é–¥–µ–π), ' \
    '–≤ –∏—Ç–º–æ—à–Ω–æ–º —Ä–∞–π–æ–Ω–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã –≤–º–µ—Å—Ç–µ —É–∂–µ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ –ö—Ä–æ–Ω–≤—É, –í—è–∑—å–º—É –∏ –¥–∞–∂–µ –õ–µ–Ω—Å–æ–≤–µ—Ç–∞, ' \
    '–∞ –∏–≥—Ä–æ–∫–∏ –≤–æ–∑–≤–æ–¥—è—Ç —Å–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã, –±–æ–ª—Ç–∞—é—Ç –≤ –≤–æ–π—Å–∏–∫–µ –∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–¥—ã—Ö–∞—é—Ç. ' \
    '–ë–æ–ª–µ–µ —Ç–æ–≥–æ, –º—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–æ–¥–∏–º —Ç–∞–º –∏–≤–µ–Ω—Ç—ã, —Å–∞–º–æ–µ –≤—Ä–µ–º—è –∑–∞–ª–µ—Ç–µ—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Äüëª\n' \
    '–¢–æ—á–Ω–æ! –¢–µ–±–µ –∂–µ –µ—â—ë –ø–æ–ª–æ–∂–µ–Ω—ã –±–æ–Ω—É—Å—ã –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Å–ø–∞—Ä—Ç–∞–∫–∏–∞–¥–µ: {} –¥–Ω–µ–π –ø—Ä–æ—Ö–æ–¥–∫–∏. ' \
    '(+30–¥–Ω–µ–π, –µ—Å–ª–∏ —É —Ç–µ–±—è –ª–∏—Ü–µ–Ω–∑–∏—è)\n\n' \
    '–ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?\n' \
    f'1) –ü–æ–¥–∫–ª—é—á–∞–π—Å—è –≤ –¥–∏—Å–∫–æ—Ä–¥: {discord_link}\n' \
    f'2) –ó–∞–ø–æ–ª–Ω—è–π –∞–Ω–∫–µ—Ç—É, —á—Ç–æ–±—ã –º—ã —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞–ª–∏—Å—å: {form_link}\n' \
    f'3) –°–ª–µ–¥–∏ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–µ: {telegram_link}! ' \
    '–ü–æ–º–æ–≥–∞—è –Ω–∞—à–µ–º—É –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é, —Ç—ã –¥–µ–ª–∞–µ—à—å –Ω–∞—à–∏ –∏–≤–µ–Ω—Ç—ã –º–∞—Å—à—Ç–∞–±–Ω–µ–µ, –∞ —Å–µ—Ä–≤–µ—Ä–∞ –∫—Ä—É—á–µ!\n' \
    'P.S.: –ü–ª–∞—à–∫—É –≤ –∏—Å—É "–ß–ª–µ–Ω –∫–ª—É–±–∞ ITMOcraft" —Ç–æ–∂–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∞–Ω–∫–µ—Ç—ã, ' \
    '–ø–æ –∂–µ–ª–∞–Ω–∏—é. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏!'

info_message = \
    '–ü—Ä–∏–≤–µ—Ç! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö –ò–¢–ú–û–∫—Ä–∞—Ñ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å:\n' \
    f'[{vk_link}. –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è]\n\n' \
    '–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤—å –µ—â—ë –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –¢–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –ø–∏—à–∏ "–ê–î–ú–ò–ù"'

welcome_message = '''
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–ø–∞—Ä—Ç–∞–∫–∏–∞–¥—É –ò–¢–ú–û –ø–æ –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç—É! –ó–∞–ø–∏—Å—ã–≤–∞–π –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:
IP: craft.itmo.ru

–ò–°–£:
{}

–ù–∏–∫:
{}

–£—á–∞—Å—Ç–≤—É–µ—à—å –ª–∏ —Ç—ã –≤ –ø–µ—Ä–≤–æ–º —ç—Ç–∞–ø–µ (BlockParty):
–î–∞.

–†–µ–∫–æ—Ä–¥ —Ä–∞—É–Ω–¥–æ–≤ –≤ –±–ª–æ–∫–ø–∞—Ç–∏:
{}

–ü–æ—Å—Ç–∞–≤—è—Ç –ª–∏ 10 –±–∞–ª–ª–æ–≤:
{}

–ü–µ—Ä–µ—Ö–æ–¥–∏—à—å –ª–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø:
{}
{}{}
–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –∏–ª–∏ –≤–∞–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞–ø–∏—à–∏ –≤ –æ—Ç–≤–µ—Ç "–ê–î–ú–ò–ù"
–ß–∏—Ç–∞–π –æ –Ω–∞—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ https://joutak.ru/minigames –∏ –¥—Ä—É–≥–∏—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö
'''.strip()

second_part = '''
–†–µ–∫–æ—Ä–¥ –≤–æ –≤—Ç–æ—Ä–æ–º —ç—Ç–∞–ø–µ:
{}

–ü—Ä–æ—Ö–æ–¥–∏—à—å –ª–∏ —Ç—ã –≤ —Ñ–∏–Ω–∞–ª:
{}

'''

third_part = '''
–†–µ–∫–æ—Ä–¥ –≤ —Ç—Ä–µ—Ç—å–µ–º —ç—Ç–∞–ø–µ:
{}

–ú–µ—Å—Ç–æ –≤ —Ñ–∏–Ω–∞–ª–µ:
{}

'''.lstrip()


#    '–ù–∞—à –∫–ª—É–± ‚Äî –∫–æ–º—å—é–Ω–∏—Ç–∏ –∏—Ç–º–æ—à–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –Ω—Ä–∞–≤–∏—Ç—Å—è –∏–≥—Ä–∞—Ç—å –≤ –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç. ' \
#    '–í—ã–∂–∏–≤–∞–Ω–∏–µ, –º–æ–¥—ã, –º–∏–Ω–∏-–∏–≥—Ä—ã: –µ—Å–ª–∏ –≤–æ —á—Ç–æ-—Ç–æ –º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å, –º—ã —Å–æ–∑–¥–∞—ë–º –¥–ª—è —ç—Ç–æ–≥–æ —É—Å–ª–æ–≤–∏—è. ' \
#    '–ù–µ–¥–∞–≤–Ω–æ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –µ—â—ë –±–æ–ª—å—à–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏, ' \
#    f'–ø–æ—ç—Ç–æ–º—É —Å —ç—Ç–æ–π —Å–ø–∞—Ä—Ç–∞–∫–∏–∞–¥—ã –º–∏–Ω–∏-–∏–≥—Ä—ã –±—É–¥—É—Ç –∏–≥—Ä–∞—Ç—å—Å—è –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –æ—Å–Ω–æ–≤–µ! IP: {joutek_ip}. ' \
#    '–ù–∞—à–∞ –∞–ª—å–º–∞-–º–∞—Ç–µ—Ä ‚Äî SMP JouTak. –≠—Ç–æ —Å–µ—Ä–≤–µ—Ä —Å —à–µ—Å—Ç–∏–ª–µ—Ç–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π ' \
#    '(–±–µ–∑ –≤–∞–π–ø–æ–≤, –±–µ–∑ –ø—Ä–∏–≤–∞—Ç–æ–≤, –±–µ–∑ —Å–ª—É—á–∞–π–Ω—ã—Ö –ª—é–¥–µ–π), ' \
#    '–≤ –∏—Ç–º–æ—à–Ω–æ–º —Ä–∞–π–æ–Ω–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã –≤–º–µ—Å—Ç–µ —É–∂–µ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ –ö—Ä–æ–Ω–≤—É, –í—è–∑—å–º—É –∏ –¥–∞–∂–µ –õ–µ–Ω—Å–æ–≤–µ—Ç–∞, ' \
#    '–∞ –∏–≥—Ä–æ–∫–∏ –≤–æ–∑–≤–æ–¥—è—Ç —Å–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã, –±–æ–ª—Ç–∞—é—Ç –≤ –≤–æ–π—Å—á–∞—Ç–µ –∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–¥—ã—Ö–∞—é—Ç. ' \
#    '–ë–æ–ª–µ–µ —Ç–æ–≥–æ, –º—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–æ–¥–∏–º —Ç–∞–º –∏–≤–µ–Ω—Ç—ã, —Å–∞–º–æ–µ –≤—Ä–µ–º—è –∑–∞–ª–µ—Ç–µ—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Äüëª ' \
#    '(+30–¥–Ω–µ–π, –µ—Å–ª–∏ —É —Ç–µ–±—è –ª–∏—Ü–µ–Ω–∑–∏—è)\n\n' \
#    '–ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?\n' \
#    f'1) –ü–æ—á–∏—Ç–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –º—ã –¥–µ–ª–∞–µ–º, –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ: {joutek_link}\n' \
#    f'2) –ó–∞–ø–æ–ª–Ω—è–π –∞–Ω–∫–µ—Ç—É, —á—Ç–æ–±—ã –º—ã —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞–ª–∏—Å—å: {form_link}\n' \
#    f'3) –°–ª–µ–¥–∏ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–µ: {telegram_link}. ' \
#    '–ü–æ–º–æ–≥–∞—è –Ω–∞—à–µ–º—É –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é, —Ç—ã –¥–µ–ª–∞–µ—à—å –∏–≤–µ–Ω—Ç—ã –º–∞—Å—à—Ç–∞–±–Ω–µ–µ, –∞ —Å–µ—Ä–≤–µ—Ä–∞ –∫—Ä—É—á–µ!\n' \
#    'P.S.: –ü–ª–∞—à–∫—É –≤ –∏—Å—É "–ß–ª–µ–Ω –∫–ª—É–±–∞ ITMOcraft" —Ç–æ–∂–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∞–Ω–∫–µ—Ç—ã, –ø–æ –∂–µ–ª–∞–Ω–∏—é. ' \
#    '–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏ "–ê–î–ú–ò–ù"!'


def is_file_accessible(filepath: str) -> bool:
    if not os.path.exists(filepath):
        return False
    if not os.path.isfile(filepath):
        return False
    if not os.access(filepath, os.R_OK):
        return False
    return True


warnings = []


def warn(*s: str) -> None:
    # print('Warning:', *s)
    warnings.append('Warning: ' + ' '.join(s))


def str2ts(s: str) -> int:
    return int(datetime.strptime(s, '%m/%d/%Y %H:%M:%S').timestamp())


def ts2str(timestamp: int) -> str:
    return datetime.fromtimestamp(timestamp).strftime('%m/%d/%Y %H:%M:%S')


class UserList:
    s2b = lambda s: s == '1'
    b2s = lambda b: '1' if b else '0'
    load2db = (str2ts, int, int, str, str, str, s2b, s2b, s2b, int, s2b, int, int, int)
    db_types = (str2ts, int, str, str, str, s2b, s2b, s2b, int, s2b, int, int, int)
    db2save = (ts2str, str, str, str, str, str, b2s, b2s, b2s, str, b2s, str, str, str)

    def __init__(self, path: str, vk_helper) -> None:
        # UL: isu tsp uid nck grp fio fst wr1 h10 rr1 wr2 rr2 fnl rr3
        # DB: tsp isu uid nck grp fio fst wr1 h10 rr1 wr2 rr2 fnl rr3
        self.db = dict[int: tuple[int, int, str, str, str, bool, bool, bool, int, bool, int, int, int]]()
        self.uid_to_isu = dict[int, int]()
        self.path = path
        self.vk_helper = vk_helper
        if self.load() is False:
            raise OSError('Something went wrong while loading DB')

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∑–∞–æ–¥–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—è –µ—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, —Ç–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç
    def load(self) -> bool:
        if is_file_accessible(self.path) is False:
            return False
        changes = False
        incorrect_uids = dict()
        incorrect_isu = 100000
        self.db.clear()
        with open(self.path, 'r', encoding='UTF-8') as file:
            for n, line in enumerate(file):
                s: list[str] = line.strip().split('\t')
                # —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è
                if not s:
                    warn(f'empty {n}-th line in DB')
                    continue
                # isu id –Ω–µ –∏–∑ —Ü–∏—Ñ—Ä
                if not all(d.isdigit() for d in s[1]):  # isu
                    warn(f'isu id is NaN in {n}-th line in DB: {s[1]}')
                    s[1] = str(incorrect_isu)
                    incorrect_isu += 1
                if s[2] == '0':  # vk_uid
                    warn(f'vk id is NaN (isu = {s[1]}) in {n}-th line in DB:', s[2])
                # vk_uid –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω, –ø–æ—Ç–æ–º –æ–ø—Ä–µ–¥–µ–ª–∏–º
                elif not all(d.isdigit() for d in s[2]):  # vk_uid
                    incorrect_uids[int(s[1])] = s[2]
                    s[2] = '0'
                    changes = True
                if len(s[5].split()) != 3:  # fio
                    warn(f'something wrong with fio (isu = {s[1]}) in {n}-th line in DB:', s[5])
                    # but okay, it's his or her problem
                if len(s) < 8:
                    s.extend(list('000'))
                if len(s) < 11:
                    s.extend(list('00'))
                if len(s) < 13:
                    s.extend(list('00'))
                    changes = True
                # UL: isu tsp uid nck grp fio fst wr1 h10 rr1 wr2 rr2 fnl rr3
                # DB: tsp isu uid nck grp fio fst wr1 h10 rr1 wr2 rr2 fnl rr3
                s = [f(i) for f, i in zip(self.load2db, s)]
                self.db[s[1]] = s[0], *s[2:]
        # –¥–æ—Å—Ç–∞—ë–º –≤—Å–µ vk_uid —á–µ—Ä–µ–∑ vk_link
        incorrect_uids = sorted(incorrect_uids.items())
        for i in range(0, len(incorrect_uids), 25):
            part = incorrect_uids[i:min(i + 25, len(incorrect_uids))]
            links = []
            for isu, uid in part:
                start = uid.rfind('/') + 1
                if start == -1:
                    start = uid.find('@') + 1
                if start == -1:
                    start = 0
                links.append(uid[start:])
            response = self.vk_helper.links_to_uids(links)
            for pair, uid in zip(part, response):
                user = list(self.db[pair[0]])
                user[VK_UID] = int(uid)
                self.db[pair[0]] = tuple(user)
        # –¥–µ–ª–∞–µ–º —à—Ç—É–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ uid
        for isu in self.db.keys():
            user = self.db[isu]
            if user[VK_UID] != 0:
                self.uid_to_isu[user[VK_UID]] = isu
        if changes is True:
            return self.save()
        return True

    def save(self) -> bool:
        if is_file_accessible(self.path) is False:
            return False
        to_save = []
        for isu in self.db.keys():
            v = self.db[isu]
            v = [f(i) for f, i in zip(self.db2save, [v[0], isu] + list(v)[1:])]
            to_save.append((v[0], '\t'.join(v)))
        to_save.sort()
        with open(users_path, 'w', encoding='UTF-8') as file:
            file.write('\n'.join(i[1] for i in to_save))
        return True

    def get(self, isu: int) -> tuple[int, int, str, str, str, bool, bool, bool, int, bool, int, int, int] | None:
        return self.db[isu] if isu in self.db.keys() else None

    def keys(self):
        return self.db.keys()


def init_spartakiada_subs(year: int) -> set[int]:
    # DB   | timestamp isu vk_uid  vk_link nick    group   fio first_time
    spartakiada_subs = set[int]()
    with open(spartakiada_subs_path.format(year), 'r', encoding='UTF-8') as file:
        for n, uid in enumerate(file):
            if not uid:
                continue
            if not all(d.isdigit() for d in uid.strip()):
                warn(f'something wrong with id in {n}-th line in spartakiada subs DB')
                continue
            spartakiada_subs.add(int(uid.strip()))
    return spartakiada_subs


def save_spartakiada_subs(uids: set[int], year: int) -> bool:
    if is_file_accessible(spartakiada_subs_path.format(year)) is False:
        return False
    with open(spartakiada_subs_path.format(year), 'w', encoding='UTF-8') as file:
        file.writelines(map(str, sorted(uids)))
    return True


spartakiada24_subs = init_spartakiada_subs(24)
spartakiada25_subs = init_spartakiada_subs(25)

tokens = (
    ('|', '&'),
    ('->', '!>'),
    ('==', '!=', '>>', '>=', '<<', '<='),
    ('tsp', 'uid', 'nck', 'grp', 'fio', 'fst', 'wr1', 'h10', 'rr1', 'wr2', 'rr2', 'fnl', 'rr3'),
    ('s24', 's25', 'adm')
)


def check_condition(cond: str) -> bool:
    for token in tokens[0]:
        if token in cond:
            return all(check_condition(i) for i in cond.split(token))
    for token in tokens[1]:
        if token in cond:
            c = cond.split(token)
            return len(c) == 2 and c[0] in tokens[3] and c[1] in tokens[4]
    for token in tokens[2]:
        if token in cond:
            c = cond.split(token)
            return len(c) == 2 and c[0] in tokens[3]
    return False


def eval_condition(user: tuple, cond: str) -> bool:
    if '|' in cond:
        return any(eval_condition(user, i) for i in cond.split('|'))
    if '&' in cond:
        return all(eval_condition(user, i) for i in cond.split('&'))
    if '->' in cond:
        c = cond.split('->')
        return user[tokens[3].index(c[0])] in [spartakiada24_subs, spartakiada25_subs, admin][tokens[4].index(c[1])]
    if '!>' in cond:
        c = cond.split('!>')
        return user[tokens[3].index(c[0])] not in [spartakiada24_subs, spartakiada25_subs, admin][tokens[4].index(c[1])]
    for token in tokens[2]:
        if token in cond:
            c = cond.split(token)
            index = tokens[3].index(c[0])
            v = user[index]
            predicate = (v.__eq__, v.__ne__, v.__gt__, v.__ge__, v.__lt__, v.__le__)
            return predicate[index](UserList.db_types[index](c[1]))
    if '!=' in cond:
        c = cond.split('!=')
        return str(user[tokens[3].index(c[0])]) != c[1]
    return False


def sender(self, condition: str, msg: str) -> list[dict]:
    if check_condition(condition) is False:
        return [{'peer_id': uid, 'message': 'Condition issue'} for uid in admin]
    users: UserList = self.users
    result = []
    for isu in users.keys():
        user = users.get(isu)
        uid = user[VK_UID]
        if uid == '0':
            continue
        if eval_condition(user, condition) is True:
            result.append({'peer_id': uid, 'message': msg})
    return result


# –ß—ë—Ç —Å –∫–Ω–æ–ø–∫–æ–π —Å–≤—è–∑–∞–Ω–æ
def process_message_event(self, event, vk_helper) -> list[dict] | None:
    pl = event.object.get('payload')
    # user_list = UserList() # TODO: userlist
    tts = ''
    sender = int(pl['sender'])
    if not pl:
        return
    return [{
        'peer_id': sender,
        'message': tts,
    }]


# –ß—ë—Ç –±–µ–∑ –∫–Ω–æ–ø–∫–∏
def process_message_new(self, event, vk_helper, ignored) -> list[dict] | None:
    users = self.users
    uid = event.message.from_id

    user_get = vk_helper.vk.users.get(user_ids=uid)
    user_get = user_get[0]
    uname = user_get['first_name']
    username = user_get['last_name']

    msg: str = event.message.text
    msgs = msg.split()
    if uid in admin:
        if msgs[0] == 'stop':
            exit()
        elif msgs[0] == 'reload':
            return [{'peer_id': uid, 'message': 'Success' if (self.users.load() is True) else 'Failed'}]
        elif msgs[0] == 'sender':
            if len(msgs) > 2:
                result = sender(self, msgs[1], ' '.join(msgs[2:]).strip())
                self.handle_actions(result)
                tts = f'–ì–æ—Ç–æ–≤–æ. –í—Å–µ–≥–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ {len(result)} —Å–æ–æ–±—â–µ–Ω–∏–π'
            elif len(msgs) == 2:
                tts = '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'
            else:
                tts = '–ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞'
            return [{
                'peer_id': uid,
                'message': tts
            }]

    if event.from_chat:
        return

    if ignored.is_ignored(uid) and '–∞–¥–º–∏–Ω' not in msg.lower():
        return
    if '–∞–¥–º–∏–Ω' in msg.lower():
        link = f'https://vk.com/gim{groupid}?sel={uid}'
        buttons = [{'label': '–ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞', 'payload': {'type': 'userlink'}, 'link': link}]
        link_keyboard = create_link_keyboard(buttons)
        if ignored.is_ignored(uid):
            ignored.remove(uid)
            ignored.save_to_file()
            tts = '–ù–∞–¥–µ—é—Å—å, –≤–æ–ø—Ä–æ—Å —Å–Ω—è—Ç!'
            atts = f'{uname} {username} –±–æ–ª—å—à–µ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç!'
            buttons = [{'label': '–ü–û–ó–í–ê–¢–¨ –ê–î–ú–ò–ù–ê', 'payload': {'type': 'callmanager'}, 'color': 'positive'}]
            keyboard = create_standart_keyboard(buttons)
        else:
            ignored.add(uid)
            ignored.save_to_file()
            tts = '–ü—Ä–∏–Ω—è—Ç–æ, —Å–µ–π—á–∞—Å –ø–æ–∑–æ–≤—É! –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. ' \
                  '–ö–æ–≥–¥–∞ –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç —Ä–µ—à—ë–Ω, –µ—â—ë —Ä–∞–∑ –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.'
            atts = f'{uname} {username} –≤—ã–∑—ã–≤–∞–µ—Ç!'
            buttons = [{'label': '–°–ü–ê–°–ò–ë–û –ê–î–ú–ò–ù', 'payload': {'type': 'uncallmanager'}, 'color': 'negative'}]
            keyboard = create_standart_keyboard(buttons)
        return [
            {
                'peer_id': uid,
                'message': tts,
                'keyboard': keyboard,
                'attachment': None
            },
            *[
                {
                    'peer_id': uid,
                    'message': atts,
                    'keyboard': link_keyboard,
                    'attachment': None
                } for uid in admin
            ]
        ]

    if vk_helper.vk_session.method('groups.isMember', {'group_id': groupid, 'user_id': uid}) == 0:
        tts = info_message
    else:
        if uid in users.uid_to_isu:
            isu = users.uid_to_isu[uid]
            user = users.get(isu)
            tts = welcome_message.format(
                isu, user[NICKNAME],
                ['–ù–µ—Ç', '–î–∞'][user[WIN_ROUND_1]], ['–ù–µ—Ç', '–î–∞'][user[HAS_10_BALLS]], user[RECORD_ROUND_1],
                second_part.format(user[RECORD_ROUND_2], ['–ù–µ—Ç', '–î–∞'][user[WIN_ROUND_2]]) if user[WIN_ROUND_1] else '',
                third_part.format(user[RECORD_ROUND_3], user[FINAL_PLACE]) if user[WIN_ROUND_2] else '')
        else:
            tts = '–ö–∞–∂–µ—Ç—Å—è, —É –Ω–∞—Å –Ω–µ—Ç —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∑–æ–≤–∏ –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–∞–∫'
    return [{
        'peer_id': uid,
        'message': tts
    }]
